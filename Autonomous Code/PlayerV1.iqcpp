{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor Flywheel = motor(PORT7, false);\nmotor Intake = motor(PORT1, false);\ntouchled Ligh = touchled(PORT12);\nmotor BlueArm = motor(PORT8, true);\nmotor LeftDriveSmart = motor(PORT3, 1, false);\nmotor RightDriveSmart = motor(PORT4, 1, true);\n\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 200);\n\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       Code                                                \n//    Author:       Quinn                                                 \n//    Created:      2022-2023 Season                                                    \n//    Description:  40458F Autonomous Player                                               \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\nbool x = false;\nint counter = 3;\n\nint Console_precision = 2;\n\n\nconst char* printToConsole_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Console_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n\nchar mystring[100];\nfloat values;\n\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint main() {\n  //Open File\n  while (true){\n    FILE* AutoData = fopen(\"AutoData.txt\", \"r\");\n    //If the fget function has something to read\n    //Write to mystring, and only the 1st 99 chars or to the newline (\\n)\n    while(counter < 5) {\n      if (fgets(mystring , 100 , AutoData) != NULL) \n      //print the string to console\n      //Should look like a line of numbers\n      //printf(\"%s\", mystring);\n      //printf(\"\\n\");\n      //values = atof(mystring);\n       values = strtof(mystring, NULL);\n      \n      if (counter == 0) {\n        printf(\"Leftdrive %f\", values);\n        \n        LeftDriveSmart.spinToPosition(values, turns,false);\n\n      } if (counter == 1) {\n        RightDriveSmart.spinToPosition(values,turns,true);\n      } if (counter == 2) {\n        Intake.spinToPosition(values,turns,false);\n        \n        \n        Brain.Screen.setCursor(2,1);\n      }if (counter == 3) {\n        BlueArm.spinToPosition(values,turns,false);\n        \n      } if (counter == 4) {\n        /*\n        if (values == 0){\n        //Spinner Stuff\n        Ligh.setColor(red);\n        Flywheel.stop();\n        } if (values == 1) {\n          Ligh.setColor(blue);\n        // If Button Toggled On And Pressed\n        // Start Slowing\n        Flywheel.setVelocity(50.0, percent);\n        Flywheel.spin(forward);\n        wait(0.2, seconds);\n        Flywheel.setVelocity(20.0, percent);\n        Flywheel.spin(forward);\n        wait(0.2, seconds);\n        // Reverse Speed\n        Flywheel.setVelocity(40.0, percent);\n        Flywheel.spin(reverse);\n        } if (values == 2){\n          Ligh.setColor(green);\n          Flywheel.setVelocity(20.0, percent);\n          Flywheel.spin(reverse);\n          wait(0.2, seconds);\n          Flywheel.setVelocity(100.0, percent);\n          Flywheel.spin(forward);\n        }\n  //Set Data*/\n      } \n      counter+=1;\n     \n    }\n\n    wait(1000,msec);\n   \n    \n    counter = 0;\n    fclose(AutoData);\n     \n  }\n     \n    \n    \n}\n","textLanguage":"cpp","rconfig":[{"port":[7],"name":"Flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[1],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"Ligh","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[8],"name":"BlueArm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3,4,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22}],"slot":1,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}
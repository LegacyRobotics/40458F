{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"_2.^beQjx|FGt38A,8(E\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"-10\"><next><block type=\"iq_looks_print_new\" id=\"9$.O?9R.ufCX~xu7=^jk\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"aHtJ7|w1lmk#y;BSQ#P8\"><field name=\"TEXT\">VEXcode</field></shadow></value><next><block type=\"iq_drivetrain_drive_for\" id=\"gO7cF8~q}(pwl3u@O{Od\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"AqS.~JN^DKwEpDQ7FDcp\"><field name=\"NUM\">200</field></shadow></value></block></next></block></next></block><block type=\"procedures_definition\" id=\"=U]IOtE6;?e3gtbkyxk8\" x=\"370\" y=\"210\"><statement name=\"custom_block\"><shadow type=\"procedures_prototype\" id=\"ulj{kL`xyS2;K[mGI!WH\"><mutation proccode=\"Drive %n %n\" proceduredefid=\"ulj{kL`xyS2;K[mGI!WH\" argumentids=\"[&quot;D*Ma54TTd7G`hb%*bA1q&quot;,&quot;Id)CRfQIT]O4.9?4-MD!&quot;]\" argumentnames=\"[&quot;Accel&quot;,&quot;Rotation&quot;]\" argumentdefaults=\"[&quot;todo&quot;,&quot;todo&quot;]\" argumenttypes=\"[&quot;n&quot;,&quot;n&quot;]\" warp=\"false\"></mutation><value name=\"D*Ma54TTd7G`hb%*bA1q\"><shadow type=\"argument_reporter_number\" id=\"P}bJWaJc1z~@NGyhOGVv\"><mutation funcname=\"Drive_Accel_Rotation\" argumentid=\"D*Ma54TTd7G`hb%*bA1q\" proceduredefid=\"ulj{kL`xyS2;K[mGI!WH\"></mutation><field name=\"VALUE\">Accel</field></shadow></value><value name=\"Id)CRfQIT]O4.9?4-MD!\"><shadow type=\"argument_reporter_number\" id=\":OwkN^h5eXw/fjc_w@pM\"><mutation funcname=\"Drive_Accel_Rotation\" argumentid=\"Id)CRfQIT]O4.9?4-MD!\" proceduredefid=\"ulj{kL`xyS2;K[mGI!WH\"></mutation><field name=\"VALUE\">Rotation</field></shadow></value></shadow></statement></block><block type=\"iq_control_forever\" id=\"s!/!r;m*wQ*;f}S3^J3:\" x=\"350\" y=\"370\"></block></xml>","rconfig":[{"port":[3,4,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT3, 1, false);\nmotor RightDriveSmart = motor(PORT4, 1, true);\n\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 200);\n\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Generated code.\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// User defined function\nvoid myblockfunction_Drive_Accel_Rotation(double myblockfunction_Drive_Accel_Rotation__Accel, double myblockfunction_Drive_Accel_Rotation__Rotation);\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable;\n\n// User defined function\nvoid myblockfunction_Drive_Accel_Rotation(double myblockfunction_Drive_Accel_Rotation__Accel, double myblockfunction_Drive_Accel_Rotation__Rotation) {\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Brain.Screen.print(\"VEXcode\");\n  Drivetrain.driveFor(forward, 200.0, mm);\n  return 0;\n}\n\n\nint main() {\n  // Calibrate the Drivetrain Gyro\n  calibrateDrivetrain();\n\n  whenStarted1();\n}","target":"Physical"}
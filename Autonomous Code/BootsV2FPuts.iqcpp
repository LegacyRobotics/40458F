{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT3, 1, false);\nmotor RightDriveSmart = motor(PORT4, 1, true);\n\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 200);\n\ncontroller Controller = controller();\nmotor BlueArm = motor(PORT8, true);\nmotor Intake = motor(PORT1, true);\ntouchled Ligh = touchled(PORT12);\nmotor Flicker = motor(PORT9, true);\nmotor Flywheel = motor(PORT7, false);\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool eButtonsControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonEUp/ButtonEDown status to control BlueArm\n      if (Controller.ButtonEUp.pressing()) {\n        BlueArm.spin(forward);\n        eButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonEDown.pressing()) {\n        BlueArm.spin(reverse);\n        eButtonsControlMotorsStopped = false;\n      } else if (!eButtonsControlMotorsStopped) {\n        BlueArm.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        eButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n#pragma endregion VEXcode Generated Robot Configuration\n\n//Declare\n\n// Include the IQ Library\n#include \"vex.h\"\n\nbool DrivetrainLNeedsToBeStopped_Controller;\nbool DrivetrainRNeedsToBeStopped_Controller;\nfloat FUPCounter = 0;\nbool Stop;\nbool x = true;\nint spinner = 0;\nbool reversed = false;\n\n\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 3;\nint precision = 100;\nint Danny = false, drivetrainLeftSideSpeed, drivetrainRightSideSpeed;\n\n \nfloat xaccel, rot, wheelturnsl, wheelturnsr, bluearmturns, intaketurns, flicker_max = 18, flicker_min = 0;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToConsole_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Console_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n\n//Code For the Driver Control\nint driving(){\n  while(true) {\n  if (Danny) {\n       if (reversed) {\n       drivetrainLeftSideSpeed = -Controller.AxisA.position();\n       drivetrainRightSideSpeed = -Controller.AxisD.position();  \n       }else {\n       drivetrainLeftSideSpeed = Controller.AxisA.position();\n       drivetrainRightSideSpeed = Controller.AxisD.position();\n       }\n      } else {\n        if (reversed) {\n        drivetrainLeftSideSpeed = -(Controller.AxisA.position() + Controller.AxisC.position());\n        drivetrainRightSideSpeed = -(Controller.AxisA.position() - Controller.AxisC.position()); \n        }else {\n        drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisC.position();\n        drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisC.position();\n        }\n      }\n\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    \n    // wait before repeating the process\n    wait(20, msec);\n  }\n}\n//End Code For Driver\n\n\n  \n\n\n\n// Write To SD Card and Console\nint whenStarted1() {\n  //Calibrate Inertal\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) { task::sleep(50); }\n  \n\n  while (true) {\n    \n    \n\n    //Set Data\n    xaccel = BrainInertial.acceleration(xaxis)*986; //Reports in mm\n    rot = BrainInertial.rotation(degrees);\n    wheelturnsl = /*Drivetrain.rotation(degrees)*/ LeftDriveSmart.position(turns);\n    wheelturnsr = RightDriveSmart.position(turns);\n    bluearmturns = BlueArm.position(turns);\n    intaketurns = Intake.position(turns);\n\n    //printf(printToConsole_numberFormat(), static_cast<float>(xaccel));\n    //Print Data to Console\n    //Print Rotation\n    printf(printToConsole_numberFormat(), static_cast<float>(rot));\n    printf(\",\");\n    //Print Left Wheel Rotations\n    printf(printToConsole_numberFormat(), static_cast<float>(wheelturnsl));\n    printf(\",\");\n    //Print Right Wheel Rotations\n    printf(printToConsole_numberFormat(), static_cast<float>(wheelturnsr));\n    //New Line\n    printf(\"\\n\");\n\n    \n\n    //Open AutoData file in append mode\n    FILE* AutoData = fopen(\"AutoData.txt\", \"a\");\n    \n\n\n    //Rotation\n    //fprintf(AutoData, \"%8.2f\", rot);\n    //New Line\n    //fprintf(AutoData, \",\");\n    //Left Wheel Turns\n    fprintf(AutoData, \"%2.2f\", wheelturnsl);\n    //New Line\n    fprintf(AutoData, \"\\n\");\n    //Right Wheel Turns\n    fprintf(AutoData, \"%2.2f\", wheelturnsr);\n    fprintf(AutoData, \"\\n\");\n    //Blue Arm Turns\n    fprintf(AutoData, \"%2.2f\", bluearmturns);\n    fprintf(AutoData, \"\\n\");\n    //IntakeTurns\n    fprintf(AutoData, \"%2.2f\", intaketurns);\n    fprintf(AutoData,\"\\n\");\n    //Flywheel\n    fprintf(AutoData, \"%i\", spinner);\n    \n\n    \n\n\n\n\n    //New Line\n\n    \n    fprintf(AutoData, \"\\n\");\n\n    /*\n    char test[256];\n    sprintf(test, \"%8.2f\", wheelturnsl);\n    fputs(test, AutoData);\n    fputs(\",\", AutoData);\n    sprintf(test, \"%8.2f\", wheelturnsr);\n    fputs(test, AutoData);\n    */\n\n    //Close File\n    fclose(AutoData);\n\n    //Wait for the determined interval 0.05 sec\n    //This can be changed to suit responsiveness of robot\n    wait(precision, msec);\n  }\n  return 0;\n}\n//End SD Card Stuff\n\n\n\n// ShoesStuff\nint whenStarted2() {\n  BlueArm.setVelocity(100,percent);\n  Intake.setVelocity(100,percent);\n  Flicker.setVelocity(100,percent);\n  BlueArm.setStopping(hold);\n  // Set F Up ounter to 0 to start\n  FUPCounter = 1;\n  \n  Ligh.setColor(red);\n  return 0;\n  while(true) {\n    \n    \n    //Brain.Screen.print(motpos);\n    \n    \n    Brain.Screen.clearScreen();\n  }//closed\n}//closed\n\n// \"when Controller ButtonFUp pressed\" hat block\nvoid onevent_ControllerButtonFUp_pressed_0() {\n  if (FUPCounter == 1.0) {\n    Ligh.setColor(blue);\n    // If Button Toggled On And Pressed\n    // Start Slowing\n    Flywheel.setVelocity(50.0, percent);\n    Flywheel.spin(forward);\n    wait(0.2, seconds);\n    Flywheel.setVelocity(20.0, percent);\n    Flywheel.spin(forward);\n    wait(0.2, seconds);\n    // Reverse Speed\n    Flywheel.setVelocity(40.0, percent);\n    Flywheel.spin(reverse);\n    // Reset Toggle (Change var to Bool)\n    FUPCounter = 0.0;\n    //Set Data\n    spinner = 1;\n\n  }//if closed\n  else {\n    // Otherwise\n    // When Button Pressed Slow flywheel, and set right direction, then speed up\n    Ligh.setColor(green);\n    Flywheel.setVelocity(20.0, percent);\n    Flywheel.spin(reverse);\n    wait(0.2, seconds);\n    Flywheel.setVelocity(100.0, percent);\n    Flywheel.spin(forward);\n    // Set Toggle (Change var to Bool\n    FUPCounter = 1.0;\n    //Data\n    spinner = 2;\n\n\n    \n  }//elseclosed\n}//closed\n\n// \"when Controller ButtonRUp pressed\" hat block\nvoid onevent_ControllerButtonRUp_pressed_0() {\n  // When Button Pressed, Set Intake reverse (only for jams)\n  printf(\"LUP\");\n  Intake.setVelocity(80.0, percent);\n  Intake.spin(reverse);\n  //onevent_ControllerButtonFUp_pressed_0();\n}//closed\n\n// \"when Controller ButtonRUp released\" hat block\nvoid onevent_ControllerButtonRUp_released_0() {\n  // When Button Released Reset Intake (Also start button)\n  Intake.setVelocity(100.0, percent);\n  Intake.spin(forward);\n}\n//closed\n// \"when Controller ButtonRDown pressed\" hat block\nvoid onevent_ControllerButtonRDown_pressed_0() {\n  Intake.stop();\n}//closed\n\n// \"when Controller ButtonFDown pressed\" hat block\nvoid onevent_ControllerButtonFDown_pressed_0() {\n  Ligh.setColor(red);\n  Flywheel.stop();\n  //Set Data\n  spinner = 0;\n}//closed\n\nvoid onevent_ControllerButtonLDown_Pressed_0() {\n  x = true;\n  while (x) {\n  Flicker.spinToPosition(flicker_max, degrees);\n  Flicker.spinToPosition(flicker_min, degrees);\n\n\n  }//closed\n  \n}//closed\n\nvoid onevent_controllerButtonLDown_Released_0(){\n  x = false;\n  //closed\n}\n\nvoid onevent_controllerButtonEUp_Pressed_0(){\n  if (BlueArm.position(turns) == -298) {\n    BlueArm.stop();\n    //closed\n  }\n  //closed\n}\n\nvoid extras() {\n  wait(1,seconds);\n  BlueArm.setStopping(hold);\n \n  Flywheel.setVelocity(100,percent);\n\n  \n\n //Closed \n \n}\n\nvoid onevent_controllerButtonL3_Pressed_0() {\n  if (Danny) {\n    Danny = false;\n  } else {\n    Danny = true;\n  }\n}\n\n \n\nint main() {\n  // Calibrate the Drivetrain Gyro\n  calibrateDrivetrain();\n\n  //Set Maxes\n  BlueArm.setMaxTorque(100,percent);\n  Flywheel.setMaxTorque(100,percent);\n  Flywheel.setStopping(coast);\n  \n\n  \n  //FUP\n  Controller.ButtonFUp.pressed(onevent_ControllerButtonFUp_pressed_0);\n\n  //From Shoes, Event Handlers\n\n  //Intake Stuff\n  //RUP\n  Controller.ButtonRUp.pressed(onevent_ControllerButtonRUp_pressed_0);\n  Controller.ButtonRUp.released(onevent_ControllerButtonRUp_released_0);\n\n  //RDown\n  Controller.ButtonRDown.pressed(onevent_ControllerButtonRDown_pressed_0);\n\n  //Flywheel Stop\n  Controller.ButtonFDown.pressed(onevent_ControllerButtonFDown_pressed_0);\n\n  //LDown\n  Controller.ButtonLDown.pressed(onevent_ControllerButtonLDown_Pressed_0);\n  Controller.ButtonLDown.released(onevent_controllerButtonLDown_Released_0);\n\n  //BlueArm\n  Controller.ButtonEUp.pressed(onevent_controllerButtonEUp_Pressed_0);\n  //Controller.ButtonEDown.pressed(onevent_controllerButtonEDown_Pressed_0);\n  Controller.ButtonEUp.released(onevent_controllerButtonEUp_Pressed_0);\n  //Controller.ButtonEDown.released(onevent_controllerButtonEDown_Pressed_0);\n  Controller.ButtonL3.pressed(onevent_controllerButtonL3_Pressed_0);\n\n//Driving\nvex::task ws1(driving);\n\n//ShoesInit\n//vex::task ws2(extras);\n\n//Shoes Stuff\nvex::task ws3(whenStarted2);\n\n\n//SD Card Suff  \nwhenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[3,4,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"true","e":"BlueArm","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[8],"name":"BlueArm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[1],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"Ligh","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[9],"name":"Flicker","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[7],"name":"Flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":3,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}
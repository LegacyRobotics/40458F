{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT3, 1, false);\nmotor RightDriveSmart = motor(PORT4, 1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nmotor BlueArm = motor(PORT8, true);\nmotor Flicker = motor(PORT9, true);\nmotor Intake = motor(PORT1, true);\nmotor Flywheel = motor(PORT7, false);\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       {author}                                                  \n//    Created:      {date}                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\nchar posstring[256];\nfloat blueArmPos;\nfloat intakePos;\nfloat flickerPos;\nfloat lWheelPos;\nfloat rWheelPos;\nint flywheelStatus;\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint main() {\n  //Main Loop for code\n  while (true) {\n    FILE* AutoData = fopen(\"AutoData.txt\", \"r\");\n    //Gets line of file\n    if (AutoData == NULL) Brain.Screen.print(\"SD Card Error\");\n   else {\n\n      //Get Position for Left Wheel and Spin\n      if ( fgets (posstring , 100 , AutoData) != NULL )\n       lWheelPos = atof(posstring);\n       LeftDriveSmart.spinToPosition(lWheelPos,turns,false);\n\n      //Get Position for Right Wheel and Spin\n      if ( fgets (posstring , 100 , AutoData) != NULL )\n       rWheelPos = atof(posstring);\n       RightDriveSmart.spinToPosition(rWheelPos,turns,false);\n       \n       //Get Position for BlueArm and Spin\n      if ( fgets (posstring , 100 , AutoData) != NULL )\n       //Brain.Screen.print(\"%s\",posstring);\n       //printf(\"%s\", posstring); \n       blueArmPos = atof(posstring);\n       BlueArm.spinToPosition(blueArmPos,turns,false);\n\n      \n      \n      //Get Position for Flicker and Spin\n      if ( fgets (posstring , 100 , AutoData) != NULL )\n       //printf(posstring);\n       flickerPos = atof(posstring);\n       Flicker.spinToPosition(flickerPos,turns,false);\n\n       //Get Position for Intake and Spin\n      if ( fgets (posstring , 100 , AutoData) != NULL )\n       printf(posstring);\n       intakePos = atof(posstring);\n       Intake.spinToPosition(intakePos,turns,false);\n\n      \n       //Get Status of flywheel\n      if ( fgets (posstring , 100 , AutoData) != NULL )\n       //printf(posstring);\n       flywheelStatus = atof(posstring);\n       \n       \n\n       \n     fclose(AutoData);\n    \n   }\n    \n  wait(200,msec);   \n  }\n  \n}\n","textLanguage":"cpp","rconfig":[{"port":[3,4,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[8],"name":"BlueArm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[9],"name":"Flicker","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[1],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[7],"name":"Flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}
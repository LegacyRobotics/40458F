{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT3, 1, false);\nmotor RightDriveSmart = motor(PORT4, 1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nmotor BlueArm = motor(PORT8, true);\nmotor Flywheel = motor(PORT7, false);\nmotor Flicker = motor(PORT9, true);\nmotor Intake = motor(PORT1, true);\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       Player 3.2                                                 \n//    Author:       Quinn Bracken                                                  \n//    Created:      1/5/23                                                 \n//    Description:  SD Card Player Version 3.2                                                \n//                                                                              \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n//Variables\nchar posstring[256];\nfloat blueArmPos;\nfloat intakePos;\nfloat flickerPos;\nfloat lWheelPos;\nfloat rWheelPos;\nfloat flywheelStatus;\nint precision = 100;\n\n\nint updatePosDat() {\n  FILE* AutoData = fopen(\"AutoData.txt\", \"r\");\n  while (true) {\n    //Gets line of file\n    if (AutoData == NULL) Brain.Screen.print(\"SD Card Error\\n\");\n    else {\n\n      //Get Position for Left Wheel\n      if (fgets(posstring, 100,AutoData) != NULL)\n      posstring[strcspn(posstring, \"\\n\")] = 0;\n      printf(\"Left Wheel: %s\\n\", posstring);\n      lWheelPos = atof(posstring);\n      if (lWheelPos == 99999999) {\n        Brain.Screen.print(\"Please Rw Tape\");\n        Brain.Screen.setCursor(1,1);\n        LeftDriveSmart.stop();\n        RightDriveSmart.stop();\n        Intake.stop();\n        BlueArm.stop();\n        Flywheel.stop();\n        Flywheel.stop();\n        break;\n        \n      }\n      LeftDriveSmart.spinToPosition((lWheelPos),degrees,false);\n\n      //Get Position for Right Wheel\n      fgets (posstring , 100 , AutoData);\n      posstring[strcspn(posstring, \"\\n\")] = 0;\n      printf(\"Right Wheel: %s\\n\", posstring);\n      rWheelPos = atof(posstring);\n      RightDriveSmart.spinToPosition(rWheelPos,degrees,false);\n      \n      //Get Position for Blue Arm\n      fgets (posstring , 100 , AutoData);\n      posstring[strcspn(posstring, \"\\n\")] = 0;\n      printf(\"Blue Arm Position: %s\\n\", posstring);\n      blueArmPos = atof(posstring);\n      BlueArm.spinToPosition(blueArmPos,degrees,false);\n      \n      //Get Position for Flicker\n      fgets (posstring , 100 , AutoData);\n      posstring[strcspn(posstring, \"\\n\")] = 0;\n      printf(\"Flicker Position: %s\\n\", posstring);\n      flickerPos = atof(posstring);\n      Flicker.spinToPosition(flickerPos,degrees,false);\n      \n      //Get Position for Intake\n      fgets (posstring , 100 , AutoData);\n      posstring[strcspn(posstring, \"\\n\")] = 0;\n      printf(\"Intake Position: %s\\n\", posstring);\n      intakePos = atof(posstring);\n      Intake.spinToPosition(intakePos,degrees,false);\n      \n      //Get Status of flywheel\n      fgets (posstring , 100 , AutoData);\n      posstring[strcspn(posstring, \"\\n\")] = 0;\n      printf(\"Flywheel Status: %s\\n\\n\", posstring);\n      flywheelStatus = atof(posstring);\n      Flywheel.spinToPosition(flywheelStatus, degrees,false);\n      /*\n      if (flywheelStatus == 0) {\n        Flywheel.stop();\n      } if (flywheelStatus == 1) {\n        // Start Slowing\n    Flywheel.setVelocity(50.0, percent);\n    Flywheel.spin(forward);\n    wait(0.2, seconds);\n    Flywheel.setVelocity(20.0, percent);\n    Flywheel.spin(forward);\n    wait(0.2, seconds);\n    // Reverse Speed\n    Flywheel.setVelocity(40.0, percent);\n    Flywheel.spin(reverse);\n      } if (flywheelStatus == 2) {\n        Flywheel.setVelocity(20.0, percent);\n    Flywheel.spin(reverse);\n    wait(0.2, seconds);\n    Flywheel.setVelocity(100.0, percent);\n    Flywheel.spin(forward);\n      }*/\n      wait(precision,msec);\n    }\n      \n    \n  }\n  fclose(AutoData);\n  return 0;\n}\n\nvoid init() {\n  \n  Drivetrain.setDriveVelocity(100,percent);\n  Drivetrain.setTurnVelocity(80,percent);\n  Intake.setVelocity(100,percent);\n  BlueArm.setVelocity(100,percent);\n  Flywheel.setVelocity(100,percent);\n  Intake.setMaxTorque(100,percent);\n  BlueArm.setMaxTorque(100,percent);\n  Flywheel.setMaxTorque(100,percent);\n\n\n}\n\n\nint main() {\n\n  \n  vex::task ws1(updatePosDat);\n  // Begin project code\n  init();\n  \n  //while (stopit) {\n   //updatePosDat();\n   \n   //LeftDriveSmart.spinToPosition(lWheelPos,turns,false);\n   //RightDriveSmart.spinToPosition(rWheelPos,turns,false);\n   //BlueArm.spinToPosition(blueArmPos,turns,false);\n   //Intake.spinToPosition(intakePos,turns,false);\n   //wait(300,msec);\n  //}\n  \n}\n\n","textLanguage":"cpp","rconfig":[{"port":[3,4,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[8],"name":"BlueArm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[7],"name":"Flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[9],"name":"Flicker","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[1],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":1,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}